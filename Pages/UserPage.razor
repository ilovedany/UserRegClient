@page "/userInfo"
@inject Services.GetUserService GetUser
@inject Services.GetRankToIDService GetRank

@using System.Collections.ObjectModel;
@inject HttpClient Http

@using UserRegClient.Models

<PageTitle>User Page</PageTitle>

<h1>User Information</h1>


@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{    
    <RadzenRow Gap="1rem">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenDataGrid ColumnWidth="200px" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" Data="@users" @bind-Value="SelectedUsers">
                <Columns>
                    <RadzenDataGridColumn Property="@nameof(User.Id)" Filterable="false" Title="Id" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
                    <RadzenDataGridColumn Property="@nameof(User.Name)" Title="Name" Width="160px" />
                    <RadzenDataGridColumn Property="@nameof(User.Surname)" Title="Surname" Width="160px"/>
                    <RadzenDataGridColumn Property="@nameof(User.Age)" Title="Age" Width="120px" />
                    <RadzenDataGridColumn Property="@nameof(User.Email)" Title="Email" Width="160px" />
                </Columns>
            </RadzenDataGrid>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6">
                <RadzenStack Gap="1rem">
                    User Rank
                 <RadzenDataGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true" Data="SelectedUsers.FirstOrDefault()?.SpecialistRank">
                        <Columns>
                            <RadzenDataGridColumn Property="@nameof(SpecialistRank.Id_rank)" Filterable="false" Title="Id_rank" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
                            <RadzenDataGridColumn Property="@nameof(SpecialistRank.Rank)" Title="Rank" Width="160px" />
                        </Columns>
                     </RadzenDataGrid> 
                </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
}

@code{
    User user = new User();
    IList<User> users;
    List<User> users1 = new List<User>();
    
    IList<SpecialistRank> ranks;
    IList<User> SelectedUsers { get; set; }
    


/*
    protected override async Task OnInitializedAsync()
    {
        users = await GetUser.GetUserList();

        foreach(var c in users){
            
            ranks = await GetRank.GetRankToIdList(c.Id);
            Console.WriteLine(ranks.Count().ToString()+c.Id);
            var props = new List<SpecialistRank>();
            
            foreach(var p in ranks){
                props.Add(p);

            }
            if (props.Count > 0)
            {
                c.SpecialistRank = props;

            }
            users1.Add(c);
            
        }
        foreach(var user in users1){
            
            Console.WriteLine(user.Name);
            

            
        }

    }
*/
protected override async Task OnInitializedAsync()
    {
        users = await GetUser.GetUserList();
        foreach(var c in users){

            try
            {
                ranks = await GetRank.GetRankToIdList(c.Id);
                
                if (ranks != null)
                {
                    var props = new List<SpecialistRank>();
                    
                    foreach(var p in ranks){
                        props.Add(p);

                    }       
                    if (props.Count > 0)
                    {

                        c.SpecialistRank = props;

                    }

                }

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);

            }

            /*Opers?.*/
            users1.Add(c);

            }
            

        
    }
    

    }

    
}    


    

